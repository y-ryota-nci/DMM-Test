#既存のアップロードファイル登録情報の最新フラグを落とす
UP0000_01: |+
 update /* UP0000_01 */ MWT_UPLOAD_REGISTERED
 set LATEST_FLAG = '0'
 where UPLOAD_FILE_ID = ?

#画面定義をユニークキーで抽出
UP0001_01: |+
 select /* UP0001_01 */ * from MWM_SCREEN where CORPORATION_CODE = ? and SCREEN_CODE = ?

#画面IDに紐付くコンテナと、その配下コンテナを抽出
UP0001_02: |+
 with X /* UP0001_02 */
  (SCREEN_ID, CONTAINER_ID, SORT_ORDER, CHILD_CONTAINER_ID, NEST_LEVEL)
 as (
  (
   select S.SCREEN_ID, C.CONTAINER_ID, P.SORT_ORDER, PCH.CHILD_CONTAINER_ID, 1 as NEST_LEVEL
   from
    MWM_SCREEN S
    inner join MWM_CONTAINER C
     on C.CONTAINER_ID = S.CONTAINER_ID
     and C.DELETE_FLAG = '0'
    left join MWM_PARTS P
     on P.CONTAINER_ID = C.CONTAINER_ID
     and P.DELETE_FLAG = '0'
     and P.PARTS_TYPE in (51, 52, 15)
    left join MWM_PARTS_CHILD_HOLDER PCH
     on PCH.PARTS_ID = P.PARTS_ID
     and PCH.DELETE_FLAG = '0'
   where
    S.SCREEN_ID = ?
    and S.DELETE_FLAG = '0'
  ) union all (
   select X.SCREEN_ID, C.CONTAINER_ID, P.SORT_ORDER, PCH.CHILD_CONTAINER_ID, X.NEST_LEVEL + 1 as NEST_LEVEL
   from X
    inner join MWM_CONTAINER C
     on C.CONTAINER_ID = X.CHILD_CONTAINER_ID
     and C.DELETE_FLAG = '0'
    left join MWM_PARTS P
     on P.CONTAINER_ID = C.CONTAINER_ID
     and P.PARTS_TYPE in (51, 52, 15)
     and P.DELETE_FLAG = '0'
    left join MWM_PARTS_CHILD_HOLDER PCH
     on PCH.PARTS_ID = P.PARTS_ID
     and PCH.DELETE_FLAG = '0'
  )
 )
 select
  SCREEN_ID, NEST_LEVEL, CONTAINER_ID, SORT_ORDER, CHILD_CONTAINER_ID
 from
  X
 order by
  NEST_LEVEL, SORT_ORDER, CONTAINER_ID

#画面IDに紐付く画面プロセス定義を抽出
UP0001_03: |+
 select /* UP0001_03 */ *
 from MWV_SCREEN_PROCESS_DEF
 where SCREEN_ID = ? and DELETE_FLAG = '0' and LOCALE_CODE = ?

#コンテナIDに紐付くパーツ定義を抽出
UP0001_04: |+
 select /* UP0001_04 */ * from {TABLE_NAME} where DELETE_FLAG = '0' and {FILTER_BY_PK} order by 1

#コンテナIDに紐付くパーツIDに関連したテーブルを抽出
UP0001_05: |+
 select /* UP0001_05 */ *
 from {TABLE_NAME}
 where DELETE_FLAG = '0' and PARTS_ID in (
  select PARTS_ID from MWM_PARTS where DELETE_FLAG = '0' and {FILTER_BY_PK}
 )
 order by 1

#コンテナIDに紐付くパーツ計算式定義に関連したテーブルを抽出
UP0001_06: |+
 select /* UP0001_06 */ *
 from {TABLE_NAME}
 where PARTS_CALC_ID in (
  select PARTS_CALC_ID
  from MWM_PARTS_CALC
  where DELETE_FLAG = '0' and PARTS_ID in (
   select PARTS_ID from MWM_PARTS where DELETE_FLAG = '0' and {FILTER_BY_PK}
  )
 )
 order by 1

#画面IDに紐付くテーブルを抽出
UP0001_07: |+
 select /* UP0001_07 */ *
 from {TABLE_NAME}
 where DELETE_FLAG = '0' and SCREEN_CALC_ID in (
  select SCREEN_CALC_ID from MWM_SCREEN_CALC where DELETE_FLAG = '0' and {FILTER_BY_PK}
 )
 order by 1

#各テーブルに紐付くの多言語対応マスタを抽出
UP0001_08: |+
 select /* UP0001_08 */ *
 from MWM_MULTILINGUAL
 where TABLE_NAME = '{TABLE_NAME}' and ID in (
  select {PK_COL_NAME} from {TABLE_NAME} where DELETE_FLAG = '0' and {FILTER_BY_PK}
 ) and DELETE_FLAG = '0'
 order by 1

#画面プロセス定義マスタに紐付く画面プロセス階層マスタを抽出
UP0001_09: |+
 select /* UP0001_09 */ *
 from
  MWM_SCREEN_PROCESS_LEVEL
 where
  DELETE_FLAG = '0'
  and SCREEN_PROCESS_LEVEL_ID in (
   select SCREEN_PROCESS_LEVEL_ID
   from MWM_SCREEN_PROCESS_DEF
   where DELETE_FLAG = '0' and {FILTER_BY_PK}
  )
  order by 1

#画面プロセス階層マスタに紐付くの多言語対応マスタを抽出
UP0001_10: |+
 select /* UP0001_10 */ *
 from MWM_MULTILINGUAL
 where TABLE_NAME = 'MWM_SCREEN_PROCESS_LEVEL'
  and DELETE_FLAG = '0'
  and ID in (
   select SCREEN_PROCESS_LEVEL_ID
   from MWM_SCREEN_PROCESS_DEF
   where DELETE_FLAG = '0' and {FILTER_BY_PK}
  )
  order by 1

UP0001_11: |+
 select /*UP0001_11*/ * from ${TABLE_NAME} where ${FILTER} order by 1

UP0001_12: |+
 select /*UP0001_12*/ * from ${TABLE_NAME} where ${FILTER} order by 1

UP0001_13: |+
 update /*UP0001_13*/ ${TABLE_NAME}
 set
  ${SET_FIELD}
  , TIMESTAMP_UPDATED = ?
  , CORPORATION_CODE_UPDATED = ?
  , USER_CODE_UPDATED = ?
  , VERSION = VERSION + 1
 where ${FILTER}

UP0001_14: |+
 select /*UP0001_14*/ * from MWM_DC order by DC_ID


UP0001_15: |+
 select /*UP0001_15*/ count(*) from MWM_SCREEN where CORPORATION_CODE = ? and SCREEN_CODE = ?

UP0001_16: |+
 select /*UP0001_16*/ count(*) from MWM_CONTAINER where CORPORATION_CODE = ? and CONTAINER_CODE = ?

#企業コード指定で汎用テーブルを抽出
UP0001_17: |+
 select /* UP0001_17 */ * from {TABLE_NAME} where DELETE_FLAG = '0' and CORPORATION_CODE = ? and {FILTER_BY_PK} order by 1

#画面プロセス定義に紐付く新規申請フォルダをネストした階層ごと抽出
UP0001_18: |+
 with X /* UP0001_18 */
  (SCREEN_PROCESS_ID, SCREEN_PROCESS_LEVEL_ID, CORPORATION_CODE, PARENT_LEVEL_CODE, LEVEL_CODE)
 as (
  (
   select
    D.SCREEN_PROCESS_ID, L.SCREEN_PROCESS_LEVEL_ID, L.CORPORATION_CODE, L.PARENT_LEVEL_CODE, L.LEVEL_CODE
   from
    MWM_SCREEN_PROCESS_DEF D
    inner join MWM_SCREEN_PROCESS_LEVEL L
     on L.SCREEN_PROCESS_LEVEL_ID = D.SCREEN_PROCESS_LEVEL_ID
     and L.DELETE_FLAG = '0'
  ) union all (
   select
    X.SCREEN_PROCESS_ID, L.SCREEN_PROCESS_LEVEL_ID, L.CORPORATION_CODE, L.PARENT_LEVEL_CODE, L.LEVEL_CODE
   from
    X
    inner join MWM_SCREEN_PROCESS_LEVEL L
     on L.CORPORATION_CODE = X.CORPORATION_CODE
     and L.LEVEL_CODE = X.PARENT_LEVEL_CODE
     and X.PARENT_LEVEL_CODE != X.LEVEL_CODE
     and L.DELETE_FLAG = '0'
  )
 )
 select
  distinct SPL.*
 from X
  inner join MWM_SCREEN_PROCESS_LEVEL SPL
   on SPL.SCREEN_PROCESS_LEVEL_ID = X.SCREEN_PROCESS_LEVEL_ID
   and SPL.DELETE_FLAG = '0'
 where
  {FILTER_BY_PK}

#コンテナIDに紐付くパーツ条件項目定義を抽出
UP0001_19: |+
 select /* UP0001_19 */ *
 from {TABLE_NAME}
 where PARTS_COND_ID in (
  select PARTS_COND_ID
  from MWM_PARTS_COND
  where DELETE_FLAG = '0' and PARTS_ID in (
   select PARTS_ID from MWM_PARTS where DELETE_FLAG = '0' and {FILTER_BY_PK}
  )
 )
 order by 1

#画面IDに紐付く画面パーツ条件項目定義を抽出
UP0001_20: |+
 select /* UP0001_20 */ *
 from {TABLE_NAME}
 where DELETE_FLAG = '0' and SCREEN_PARTS_COND_ID in (
  select SCREEN_PARTS_COND_ID from MWM_SCREEN_PARTS_COND where DELETE_FLAG = '0' and {FILTER_BY_PK}
 )
 order by 1

#コンテナコードに対するコンテナIDを配列で抽出
UP0001_21: |+
 select /* UP0001_21 */ * from MWM_CONTAINER
 where CORPORATION_CODE = ? and {FILTER_BY_PK}

#デフォルトブロック表示条件マスタ
UP0001_22: |+
 select /* UP0001_22 */ * from MWM_DEFAULT_BLOCK_DISPLAY where CORPORATION_CODE = ?

#画面マスタのアップロード日時を更新
UP0001_23: |+
 update /* UP0001_23 */ MWM_SCREEN set UPLOAD_DATETIME = sysdate where SCREEN_ID = ?

#アップロード履歴一覧
UP0100_01: |+
 select /* UP0100_01 */
  ${REPLACE}
 from MWT_UPLOAD_FILE F
  inner join WFM_LOCALE L
   on L.LOCALE_CODE = ?
  left join WFM_CORPORATION_V C
   on C.CORPORATION_CODE = F.FILE_CORPORATION_CODE
   and C.LOCALE_CODE = L.LOCALE_CODE
  left join MWM_LOOKUP L1
   on L1.CORPORATION_CODE = F.UPLOAD_CORPORATION_CODE
   and L1.LOOKUP_GROUP_ID = 'UPLOAD_KIND'
   and L1.LOOKUP_ID = F.UPLOAD_KIND
   and L1.LOCALE_CODE = L.LOCALE_CODE
   and L1.DELETE_FLAG = '0'
  left join MWM_LOOKUP L2
   on L2.CORPORATION_CODE = F.UPLOAD_CORPORATION_CODE
   and L2.LOOKUP_GROUP_ID = 'EXIST_FLAG'
   and L2.LOOKUP_ID = F.REGISTERED_FLAG
   and L2.LOCALE_CODE = L.LOCALE_CODE
   and L2.DELETE_FLAG = '0'
 where
  F.UPLOAD_CORPORATION_CODE = ?
  and F.DELETE_FLAG = '0'

#アップロード履歴一覧のSELECT句
UP0100_02: |+
 F.UPLOAD_FILE_ID, F.UPLOAD_KIND, L1.LOOKUP_NAME as UPLOAD_KIND_NAME, ROWNUM as
 , F.UPLOAD_DATETIME, F.UPLOAD_CORPORATION_CODE
 , nvl(C.CORPORATION_NAME, '(?)') as FILE_CORPORATION_NAME
 , F.REGISTERED_FLAG, L2.LOOKUP_NAME as REGISTERED_FLAG_NAME
 , F.FILE_NAME, F.FILE_TIMESTAMP, F.FILE_CORPORATION_CODE, F.FILE_APP_VERSION, F.FILE_DB_STRING
 , F.FILE_HOST_NAME, F.FILE_HOST_IP_ADDR


#アップロードファイル登録情報を取得
UP0100_03: |+
 select /* UP0100_03 */
  R.*, U.USER_ADDED_INFO as REGISTERED_USER_ADDED_INFO, U.USER_NAME as REGISTERED_USER_NAME
 from MWT_UPLOAD_REGISTERED R
  inner join WFM_USER_V U
   on U.CORPORATION_CODE = R.REGISTERED_CORPORATION_CODE
   and U.USER_CODE = R.REGISTERED_USER_CODE
   and U.DELETE_FLAG = '0'
   and U.LOCALE_CODE = ?
 where
  R.UPLOAD_FILE_ID = ?
 order by
  R.REGISTERED_DATETIME


#truncate文の実行
UP0200_01: |+
 truncate table /* UP0200_01 */ ${REPLACE}

#ロック
UP0200_02: |+
 merge into WFM_CORP_PROP_MASTER CP
 using (select ? as PROPERTY_CODE from DUAL) X
  on (CP.PROPERTY_CODE = X.PROPERTY_CODE)
 when not matched then
  insert (PROPERTY_CODE, DEFAULT_VALUE, SORT_ORDER, ID, CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED, CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
  values (X.PROPERTY_CODE, '1', null, GET_NEXTMASTERID('WFM_CORP_PROP_MASTER'), '---', '---', '---', systimestamp, '---', '---', '---', systimestamp)
 when matched then
  update set DEFAULT_VALUE = '1', TIMESTAMP_UPDATED = systimestamp


#アンロック
UP0200_03: |+
 update WFM_CORP_PROP_MASTER
 set DEFAULT_VALUE = '0', TIMESTAMP_UPDATED = systimestamp
 where PROPERTY_CODE = ? and TIMESTAMP_UPDATED = ?

#組織マスタ(ワーク)へのインサート
UP0200_04: |+
 INSERT INTO /* UP0200_04 */ WFM_ORGANIZATION_WORK( CORPORATION_CODE, ORGANIZATION_CODE
  , ORGANIZATION_NAME_JA, ORGANIZATION_NAME_EN, ORGANIZATION_NAME_ZH
  , ORGANIZATION_ADDED_INFO
  , ORGANIZATION_NAME_ABBR_JA, ORGANIZATION_NAME_ABBR_EN, ORGANIZATION_NAME_ABBR_ZH
  , ORGANIZATION_CODE_UP, POST_NUM, ADDRESS_JA, ADDRESS_EN, ADDRESS_ZH
  , TEL_NUM, FAX_NUM, ORGANIZATION_LEVEL, SORT_ORDER, EXTENDED_INFO_01, EXTENDED_INFO_02
  , EXTENDED_INFO_03, EXTENDED_INFO_04, EXTENDED_INFO_05, EXTENDED_INFO_06, EXTENDED_INFO_07
  , EXTENDED_INFO_08, EXTENDED_INFO_09, EXTENDED_INFO_10, VALID_START_DATE, VALID_END_DATE
  , DELETE_FLAG, CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

#組織マスタと組織マスタ(ワーク)への差分更新
UP0200_05: |+
 merge into /* UP0200_05 */ WFM_ORGANIZATION O
 using WFM_ORGANIZATION_WORK W
  on (W.CORPORATION_CODE = O.CORPORATION_CODE
  and W.ORGANIZATION_CODE = O.ORGANIZATION_CODE)
 when not matched then
  insert (
   CORPORATION_CODE, ORGANIZATION_CODE, ORGANIZATION_NAME, ORGANIZATION_ADDED_INFO
   , ORGANIZATION_NAME_ABBR, ORGANIZATION_CODE_UP, POST_NUM, ADDRESS, TEL_NUM, FAX_NUM
   , ORGANIZATION_LEVEL, SORT_ORDER, EXTENDED_INFO_01, EXTENDED_INFO_02, EXTENDED_INFO_03
   , EXTENDED_INFO_04, EXTENDED_INFO_05, EXTENDED_INFO_06, EXTENDED_INFO_07, EXTENDED_INFO_08
   , EXTENDED_INFO_09, EXTENDED_INFO_10, VALID_START_DATE, VALID_END_DATE, DELETE_FLAG
   , ID, CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED
  ) values (
   W.CORPORATION_CODE, W.ORGANIZATION_CODE, W.ORGANIZATION_NAME_JA, W.ORGANIZATION_ADDED_INFO
   , W.ORGANIZATION_NAME_ABBR_JA, nvl(W.ORGANIZATION_CODE_UP, W.ORGANIZATION_CODE)
   , W.POST_NUM, W.ADDRESS_JA, W.TEL_NUM, W.FAX_NUM
   , W.ORGANIZATION_LEVEL, W.SORT_ORDER, W.EXTENDED_INFO_01, W.EXTENDED_INFO_02, W.EXTENDED_INFO_03
   , W.EXTENDED_INFO_04, W.EXTENDED_INFO_05, W.EXTENDED_INFO_06, W.EXTENDED_INFO_07, W.EXTENDED_INFO_08
   , W.EXTENDED_INFO_09, W.EXTENDED_INFO_10, W.VALID_START_DATE, W.VALID_END_DATE, W.DELETE_FLAG
   , GET_NEXTMASTERID('WFM_ORGANIZATION')
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED
  )
 when matched then
  update set
   ORGANIZATION_NAME = W.ORGANIZATION_NAME_JA
   , ORGANIZATION_ADDED_INFO = W.ORGANIZATION_ADDED_INFO
   , ORGANIZATION_NAME_ABBR = W.ORGANIZATION_NAME_ABBR_JA
   , ORGANIZATION_CODE_UP = nvl(W.ORGANIZATION_CODE_UP, W.ORGANIZATION_CODE)
   , POST_NUM = W.POST_NUM
   , ADDRESS = W.ADDRESS_JA
   , TEL_NUM = W.TEL_NUM
   , FAX_NUM = W.FAX_NUM
   , ORGANIZATION_LEVEL = W.ORGANIZATION_LEVEL
   , SORT_ORDER = W.SORT_ORDER
   , EXTENDED_INFO_01 = W.EXTENDED_INFO_01
   , EXTENDED_INFO_02 = W.EXTENDED_INFO_02
   , EXTENDED_INFO_03 = W.EXTENDED_INFO_03
   , EXTENDED_INFO_04 = W.EXTENDED_INFO_04
   , EXTENDED_INFO_05 = W.EXTENDED_INFO_05
   , EXTENDED_INFO_06 = W.EXTENDED_INFO_06
   , EXTENDED_INFO_07 = W.EXTENDED_INFO_07
   , EXTENDED_INFO_08 = W.EXTENDED_INFO_08
   , EXTENDED_INFO_09 = W.EXTENDED_INFO_09
   , EXTENDED_INFO_10 = W.EXTENDED_INFO_10
   , VALID_START_DATE = W.VALID_START_DATE
   , VALID_END_DATE = W.VALID_END_DATE
   , DELETE_FLAG = W.DELETE_FLAG
   , CORPORATION_CODE_UPDATED = W.CORPORATION_CODE_UPDATED
   , USER_CODE_UPDATED = W.USER_CODE_UPDATED
   , IP_UPDATED = W.IP_UPDATED
   , TIMESTAMP_UPDATED = W.TIMESTAMP_UPDATED


#組織マスタ抽出
UP0200_06: |+
 select /* UP0200_06 */
  O.ID, O.CORPORATION_CODE, O.ORGANIZATION_CODE
  , nvl(NAME_JA.NAME_VALUE, O.ORGANIZATION_NAME) as ORGANIZATION_NAME_JA
  , NAME_EN.NAME_VALUE as ORGANIZATION_NAME_EN
  , NAME_ZH.NAME_VALUE as ORGANIZATION_NAME_ZH
  , O.ORGANIZATION_ADDED_INFO
  , nvl(ABBR_JA.NAME_VALUE, O.ORGANIZATION_NAME_ABBR) as ORGANIZATION_NAME_ABBR_JA
  , ABBR_EN.NAME_VALUE as ORGANIZATION_NAME_ABBR_EN
  , ABBR_ZH.NAME_VALUE as ORGANIZATION_NAME_ABBR_ZH
  , O.ORGANIZATION_CODE_UP, O.POST_NUM
  , nvl(ADDRESS_JA.NAME_VALUE, O.ADDRESS) as ADDRESS_JA
  , ADDRESS_EN.NAME_VALUE as ADDRESS_EN
  , ADDRESS_ZH.NAME_VALUE as ADDRESS_ZH
  , O.TEL_NUM, O.FAX_NUM, O.ORGANIZATION_LEVEL, O.SORT_ORDER
  , O.EXTENDED_INFO_01, O.EXTENDED_INFO_02, O.EXTENDED_INFO_03, O.EXTENDED_INFO_04
  , O.EXTENDED_INFO_05, O.EXTENDED_INFO_06, O.EXTENDED_INFO_07, O.EXTENDED_INFO_08
  , O.EXTENDED_INFO_09, O.EXTENDED_INFO_10, O.VALID_START_DATE, O.VALID_END_DATE, O.DELETE_FLAG
 from WFM_ORGANIZATION O
  left join WFM_NAME_LOOKUP NAME_JA
   on NAME_JA.TABLE_NAME = 'WFM_ORGANIZATION'
   and NAME_JA.ID = O.ID
   and NAME_JA.COLUMN_NAME = 'ORGANIZATION_NAME'
   and NAME_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP ABBR_JA
   on ABBR_JA.TABLE_NAME = 'WFM_ORGANIZATION'
   and ABBR_JA.ID = O.ID
   and ABBR_JA.COLUMN_NAME = 'ORGANIZATION_NAME_ABBR'
   and ABBR_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP ADDRESS_JA
   on ADDRESS_JA.TABLE_NAME = 'WFM_ORGANIZATION'
   and ADDRESS_JA.ID = O.ID
   and ADDRESS_JA.COLUMN_NAME = 'ADDRESS'
   and ADDRESS_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP NAME_EN
   on NAME_EN.TABLE_NAME = 'WFM_ORGANIZATION'
   and NAME_EN.ID = O.ID
   and NAME_EN.COLUMN_NAME = 'ORGANIZATION_NAME'
   and NAME_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP ABBR_EN
   on ABBR_EN.TABLE_NAME = 'WFM_ORGANIZATION'
   and ABBR_EN.ID = O.ID
   and ABBR_EN.COLUMN_NAME = 'ORGANIZATION_NAME_ABBR'
   and ABBR_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP ADDRESS_EN
   on ADDRESS_EN.TABLE_NAME = 'WFM_ORGANIZATION'
   and ADDRESS_EN.ID = O.ID
   and ADDRESS_EN.COLUMN_NAME = 'ADDRESS'
   and ADDRESS_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP NAME_ZH
   on NAME_ZH.TABLE_NAME = 'WFM_ORGANIZATION'
   and NAME_ZH.ID = O.ID
   and NAME_ZH.COLUMN_NAME = 'ORGANIZATION_NAME'
   and NAME_ZH.LOCALE_CODE = 'zh'
  left join WFM_NAME_LOOKUP ABBR_ZH
   on ABBR_ZH.TABLE_NAME = 'WFM_ORGANIZATION'
   and ABBR_ZH.ID = O.ID
   and ABBR_ZH.COLUMN_NAME = 'ORGANIZATION_NAME_ABBR'
   and ABBR_ZH.LOCALE_CODE = 'zh'
  left join WFM_NAME_LOOKUP ADDRESS_ZH
   on ADDRESS_ZH.TABLE_NAME = 'WFM_ORGANIZATION'
   and ADDRESS_ZH.ID = O.ID
   and ADDRESS_ZH.COLUMN_NAME = 'ADDRESS'
   and ADDRESS_ZH.LOCALE_CODE = 'zh'
 where
  O.CORPORATION_CODE = ?
 order by
  O.CORPORATION_CODE, O.ORGANIZATION_LEVEL, O.SORT_ORDER, O.ORGANIZATION_ADDED_INFO, O.ORGANIZATION_CODE

#役職マスタ抽出
UP0200_07: |+
 select /* UP0200_07 */
  P.ID, P.CORPORATION_CODE, P.POST_CODE
  , nvl(NAME_JA.NAME_VALUE, P.POST_NAME) as POST_NAME_JA
  , NAME_EN.NAME_VALUE as POST_NAME_EN
  , NAME_ZH.NAME_VALUE as POST_NAME_ZH
  , P.POST_ADDED_INFO
  , nvl(ABBR_JA.NAME_VALUE, P.POST_NAME_ABBR) as POST_NAME_ABBR_JA
  , ABBR_EN.NAME_VALUE as POST_NAME_ABBR_EN
  , ABBR_ZH.NAME_VALUE as POST_NAME_ABBR_ZH
  , P.POST_LEVEL, P.VALID_START_DATE, P.VALID_END_DATE
  , P.UPPER_POST_SETTINGS_FLAG, P.DELETE_FLAG
 from WFM_POST P
  left join WFM_NAME_LOOKUP NAME_JA
   on NAME_JA.TABLE_NAME = 'WFM_POST'
   and NAME_JA.ID = P.ID
   and NAME_JA.COLUMN_NAME = 'POST_NAME'
   and NAME_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP ABBR_JA
   on ABBR_JA.TABLE_NAME = 'WFM_POST'
   and ABBR_JA.ID = P.ID
   and ABBR_JA.COLUMN_NAME = 'POST_NAME_ABBR'
   and ABBR_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP NAME_EN
   on NAME_EN.TABLE_NAME = 'WFM_POST'
   and NAME_EN.ID = P.ID
   and NAME_EN.COLUMN_NAME = 'POST_NAME'
   and NAME_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP ABBR_EN
   on ABBR_EN.TABLE_NAME = 'WFM_POST'
   and ABBR_EN.ID = P.ID
   and ABBR_EN.COLUMN_NAME = 'POST_NAME_ABBR'
   and ABBR_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP NAME_ZH
   on NAME_ZH.TABLE_NAME = 'WFM_POST'
   and NAME_ZH.ID = P.ID
   and NAME_ZH.COLUMN_NAME = 'POST_NAME'
   and NAME_ZH.LOCALE_CODE = 'zh'
  left join WFM_NAME_LOOKUP ABBR_ZH
   on ABBR_ZH.TABLE_NAME = 'WFM_POST'
   and ABBR_ZH.ID = P.ID
   and ABBR_ZH.COLUMN_NAME = 'POST_NAME_ABBR'
   and ABBR_ZH.LOCALE_CODE = 'zh'
 where
  P.CORPORATION_CODE = ?
 order by
  P.CORPORATION_CODE, P.POST_LEVEL, P.POST_ADDED_INFO, P.POST_CODE

#ユーザマスタ抽出
UP0200_08: |+
 select /* UP0200_08 */
  U.ID, U.CORPORATION_CODE, U.USER_CODE
  , nvl(NAME_JA.NAME_VALUE, U.USER_NAME) as USER_NAME_JA
  , NAME_EN.NAME_VALUE as USER_NAME_EN
  , NAME_ZH.NAME_VALUE as USER_NAME_ZH
  , nvl(ABBR_JA.NAME_VALUE, U.USER_NAME_ABBR) as USER_NAME_ABBR_JA
  , ABBR_EN.NAME_VALUE as USER_NAME_ABBR_EN
  , ABBR_ZH.NAME_VALUE as USER_NAME_ABBR_ZH
  , U.POST_NUM
  , nvl(ADDRESS_JA.NAME_VALUE, U.ADDRESS) as ADDRESS_JA
  , ADDRESS_EN.NAME_VALUE as ADDRESS_EN
  , ADDRESS_ZH.NAME_VALUE as ADDRESS_ZH
  , U.TEL_NUM, U.TEL_NUM_CEL
  , U.MAIL_ADDRESS, U.USER_ADDED_INFO, U.SEAL_NAME, U.ADMINISTRATOR_TYPE
  , U.DEFAULT_LOCALE_CODE, U.EXTENDED_INFO_01, U.EXTENDED_INFO_02
  , U.EXTENDED_INFO_03, U.EXTENDED_INFO_04, U.EXTENDED_INFO_05, U.EXTENDED_INFO_06
  , U.EXTENDED_INFO_07, U.EXTENDED_INFO_08, U.EXTENDED_INFO_09, U.EXTENDED_INFO_10
  , U.VALID_START_DATE, U.VALID_END_DATE, U.DELETE_FLAG
 from WFM_USER U
  left join WFM_NAME_LOOKUP NAME_JA
   on NAME_JA.TABLE_NAME = 'WFM_USER'
   and NAME_JA.ID = U.ID
   and NAME_JA.COLUMN_NAME = 'USER_NAME'
   and NAME_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP ABBR_JA
   on ABBR_JA.TABLE_NAME = 'WFM_USER'
   and ABBR_JA.ID = U.ID
   and ABBR_JA.COLUMN_NAME = 'USER_NAME_ABBR'
   and ABBR_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP ADDRESS_JA
   on ADDRESS_JA.TABLE_NAME = 'WFM_USER'
   and ADDRESS_JA.ID = U.ID
   and ADDRESS_JA.COLUMN_NAME = 'ADDRESS'
   and ADDRESS_JA.LOCALE_CODE = 'ja'
  left join WFM_NAME_LOOKUP NAME_EN
   on NAME_EN.TABLE_NAME = 'WFM_USER'
   and NAME_EN.ID = U.ID
   and NAME_EN.COLUMN_NAME = 'USER_NAME'
   and NAME_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP ABBR_EN
   on ABBR_EN.TABLE_NAME = 'WFM_USER'
   and ABBR_EN.ID = U.ID
   and ABBR_EN.COLUMN_NAME = 'USER_NAME_ABBR'
   and ABBR_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP ADDRESS_EN
   on ADDRESS_EN.TABLE_NAME = 'WFM_USER'
   and ADDRESS_EN.ID = U.ID
   and ADDRESS_EN.COLUMN_NAME = 'ADDRESS'
   and ADDRESS_EN.LOCALE_CODE = 'en'
  left join WFM_NAME_LOOKUP NAME_ZH
   on NAME_ZH.TABLE_NAME = 'WFM_USER'
   and NAME_ZH.ID = U.ID
   and NAME_ZH.COLUMN_NAME = 'USER_NAME'
   and NAME_ZH.LOCALE_CODE = 'zh'
  left join WFM_NAME_LOOKUP ABBR_ZH
   on ABBR_ZH.TABLE_NAME = 'WFM_USER'
   and ABBR_ZH.ID = U.ID
   and ABBR_ZH.COLUMN_NAME = 'USER_NAME_ABBR'
   and ABBR_ZH.LOCALE_CODE = 'zh'
  left join WFM_NAME_LOOKUP ADDRESS_ZH
   on ADDRESS_ZH.TABLE_NAME = 'WFM_USER'
   and ADDRESS_ZH.ID = U.ID
   and ADDRESS_ZH.COLUMN_NAME = 'ADDRESS'
   and ADDRESS_ZH.LOCALE_CODE = 'zh'
 where
  U.CORPORATION_CODE = ?
 order by
  U.CORPORATION_CODE, U.USER_ADDED_INFO, U.USER_CODE

#ユーザ所属抽出
UP0200_09: |+
 select /* UP0200_09 */
  ID, CORPORATION_CODE, USER_CODE, SEQ_NO_USER_BELONG
  , ORGANIZATION_CODE, POST_CODE, JOB_TYPE, IMMEDIATE_MANAGER_FLAG, DIRECTOR_FLAG
  , VALID_START_DATE, VALID_END_DATE, DELETE_FLAG
 from WFM_USER_BELONG
 where
  CORPORATION_CODE = ?
 order by
  CORPORATION_CODE, USER_CODE, SEQ_NO_USER_BELONG

#役職マスタ(ワーク)への一括インサート
UP0200_10: |+
 INSERT INTO /* UP0200_10 */ WFM_POST_WORK(CORPORATION_CODE, POST_CODE, POST_NAME_JA, POST_NAME_EN, POST_NAME_ZH, POST_ADDED_INFO, POST_NAME_ABBR_JA, POST_NAME_ABBR_EN, POST_NAME_ABBR_ZH, POST_LEVEL, VALID_START_DATE, VALID_END_DATE, UPPER_POST_SETTINGS_FLAG, DELETE_FLAG, CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

#役職マスタと役職マスタ(ワーク)への差分更新
UP0200_11: |+
 merge into /* UP0200_11 */ WFM_POST P
 using WFM_POST_WORK W
  on (W.CORPORATION_CODE = P.CORPORATION_CODE and W.POST_CODE = P.POST_CODE)
 when not matched then
  insert (CORPORATION_CODE, POST_CODE, POST_NAME, POST_ADDED_INFO, POST_NAME_ABBR
   , POST_LEVEL, VALID_START_DATE, VALID_END_DATE, UPPER_POST_SETTINGS_FLAG
   , DELETE_FLAG, ID, CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
  values (W.CORPORATION_CODE, W.POST_CODE, W.POST_NAME_JA, W.POST_ADDED_INFO
   , W.POST_NAME_ABBR_JA, W.POST_LEVEL, W.VALID_START_DATE, W.VALID_END_DATE
   , W.UPPER_POST_SETTINGS_FLAG, W.DELETE_FLAG, GET_NEXTMASTERID('WFM_POST')
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED)
 when matched then
  update set
   POST_NAME = W.POST_NAME_JA, POST_ADDED_INFO = W.POST_ADDED_INFO
   , POST_NAME_ABBR = W.POST_NAME_ABBR_JA, POST_LEVEL = W.POST_LEVEL
   , VALID_START_DATE = W.VALID_START_DATE, VALID_END_DATE = W.VALID_END_DATE
   , UPPER_POST_SETTINGS_FLAG = W.UPPER_POST_SETTINGS_FLAG
   , DELETE_FLAG = W.DELETE_FLAG
   , CORPORATION_CODE_UPDATED = W.CORPORATION_CODE_UPDATED
   , USER_CODE_UPDATED = W.USER_CODE_UPDATED, IP_UPDATED = W.IP_UPDATED
   , TIMESTAMP_UPDATED = W.TIMESTAMP_UPDATED

#ユーザマスタ(ワーク)への一括インサート
UP0200_12: |+
 insert into /* UP0200_12 */ WFM_USER_WORK (CORPORATION_CODE, USER_CODE, USER_NAME_JA, USER_NAME_EN, USER_NAME_ZH, USER_NAME_ABBR_JA, USER_NAME_ABBR_EN, USER_NAME_ABBR_ZH, POST_NUM, ADDRESS_JA, ADDRESS_EN, ADDRESS_ZH, TEL_NUM, TEL_NUM_CEL, MAIL_ADDRESS, USER_ADDED_INFO, SEAL_NAME, ADMINISTRATOR_TYPE, DEFAULT_LOCALE_CODE, EXTENDED_INFO_01, EXTENDED_INFO_02, EXTENDED_INFO_03, EXTENDED_INFO_04, EXTENDED_INFO_05, EXTENDED_INFO_06, EXTENDED_INFO_07, EXTENDED_INFO_08, EXTENDED_INFO_09, EXTENDED_INFO_10, VALID_START_DATE, VALID_END_DATE, DELETE_FLAG, DEFAULT_PASSWORD, CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

#ユーザマスタとユーザマスタ(ワーク)の差分更新
UP0200_13: |+
 merge into /* UP0200_13 */ WFM_USER U
 using WFM_USER_WORK W
  on (W.CORPORATION_CODE = U.CORPORATION_CODE and W.USER_CODE = U.USER_CODE)
 when not matched then
  insert (CORPORATION_CODE, USER_CODE, USER_NAME, USER_NAME_ABBR, POST_NUM
   , ADDRESS, TEL_NUM, TEL_NUM_CEL, MAIL_ADDRESS, USER_ADDED_INFO, SEAL_NAME
   , ADMINISTRATOR_TYPE, DEFAULT_LOCALE_CODE, EXTENDED_INFO_01, EXTENDED_INFO_02
   , EXTENDED_INFO_03, EXTENDED_INFO_04, EXTENDED_INFO_05, EXTENDED_INFO_06
   , EXTENDED_INFO_07, EXTENDED_INFO_08, EXTENDED_INFO_09, EXTENDED_INFO_10
   , VALID_START_DATE, VALID_END_DATE, DELETE_FLAG, ID
   , CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
  values (W.CORPORATION_CODE, W.USER_CODE, W.USER_NAME_JA, W.USER_NAME_ABBR_JA, W.POST_NUM
   , W.ADDRESS_JA, W.TEL_NUM, W.TEL_NUM_CEL, W.MAIL_ADDRESS, W.USER_ADDED_INFO
   , W.SEAL_NAME, W.ADMINISTRATOR_TYPE, W.DEFAULT_LOCALE_CODE
   , W.EXTENDED_INFO_01, W.EXTENDED_INFO_02, W.EXTENDED_INFO_03, W.EXTENDED_INFO_04
   , W.EXTENDED_INFO_05, W.EXTENDED_INFO_06, W.EXTENDED_INFO_07, W.EXTENDED_INFO_08
   , W.EXTENDED_INFO_09, W.EXTENDED_INFO_10, W.VALID_START_DATE, W.VALID_END_DATE
   , W.DELETE_FLAG, GET_NEXTMASTERID('WFM_USER')
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED
  )
 when matched then
  update set
   USER_NAME = W.USER_NAME_JA, USER_NAME_ABBR = W.USER_NAME_ABBR_JA
   , POST_NUM = W.POST_NUM, ADDRESS = W.ADDRESS_JA, TEL_NUM = W.TEL_NUM
   , TEL_NUM_CEL = W.TEL_NUM_CEL, MAIL_ADDRESS = W.MAIL_ADDRESS
   , USER_ADDED_INFO = W.USER_ADDED_INFO, SEAL_NAME = W.SEAL_NAME
   , ADMINISTRATOR_TYPE = W.ADMINISTRATOR_TYPE, DEFAULT_LOCALE_CODE = W.DEFAULT_LOCALE_CODE
   , EXTENDED_INFO_01 = W.EXTENDED_INFO_01, EXTENDED_INFO_02 = W.EXTENDED_INFO_02
   , EXTENDED_INFO_03 = W.EXTENDED_INFO_03, EXTENDED_INFO_04 = W.EXTENDED_INFO_04
   , EXTENDED_INFO_05 = W.EXTENDED_INFO_05, EXTENDED_INFO_06 = W.EXTENDED_INFO_06
   , EXTENDED_INFO_07 = W.EXTENDED_INFO_07, EXTENDED_INFO_08 = W.EXTENDED_INFO_08
   , EXTENDED_INFO_09 = W.EXTENDED_INFO_09, EXTENDED_INFO_10 = W.EXTENDED_INFO_10
   , VALID_START_DATE = W.VALID_START_DATE, VALID_END_DATE = W.VALID_END_DATE
   , DELETE_FLAG = W.DELETE_FLAG, CORPORATION_CODE_UPDATED = W.CORPORATION_CODE_UPDATED
   , USER_CODE_UPDATED = W.USER_CODE_UPDATED, IP_UPDATED = W.IP_UPDATED, TIMESTAMP_UPDATED = W.TIMESTAMP_UPDATED

#ユーザ所属(ワーク)への一括インサート
UP0200_14: |+
 insert into /* UP0200_14 */ WFM_USER_BELONG_WORK(CORPORATION_CODE, USER_CODE, SEQ_NO_USER_BELONG, ORGANIZATION_CODE, POST_CODE, JOB_TYPE, IMMEDIATE_MANAGER_FLAG, DIRECTOR_FLAG, VALID_START_DATE, VALID_END_DATE, DELETE_FLAG, CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
 values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

#ユーザ所属とユーザ所属(ワーク)の差分更新
UP0200_15: |+
 merge into /* UP0200_15 */ WFM_USER_BELONG UB
 using WFM_USER_BELONG_WORK W
  on (W.CORPORATION_CODE = UB.CORPORATION_CODE and W.USER_CODE = UB.USER_CODE and W.SEQ_NO_USER_BELONG = UB.SEQ_NO_USER_BELONG)
 when not matched then
  insert (CORPORATION_CODE, USER_CODE, SEQ_NO_USER_BELONG, ORGANIZATION_CODE
   , POST_CODE, JOB_TYPE, IMMEDIATE_MANAGER_FLAG, DIRECTOR_FLAG
   , VALID_START_DATE, VALID_END_DATE, DELETE_FLAG, ID
   , CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
  values (W.CORPORATION_CODE, W.USER_CODE, W.SEQ_NO_USER_BELONG, W.ORGANIZATION_CODE
   , W.POST_CODE, W.JOB_TYPE, W.IMMEDIATE_MANAGER_FLAG, W.DIRECTOR_FLAG
   , W.VALID_START_DATE, W.VALID_END_DATE, W.DELETE_FLAG, GET_NEXTMASTERID('WFM_USER_BELONG')
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED)
 when matched then
  update set
   ORGANIZATION_CODE = W.ORGANIZATION_CODE, POST_CODE = W.POST_CODE
   , JOB_TYPE = W.JOB_TYPE, IMMEDIATE_MANAGER_FLAG = W.IMMEDIATE_MANAGER_FLAG
   , DIRECTOR_FLAG = W.DIRECTOR_FLAG, VALID_START_DATE = W.VALID_START_DATE
   , VALID_END_DATE = W.VALID_END_DATE, DELETE_FLAG = W.DELETE_FLAG
   , CORPORATION_CODE_UPDATED = W.CORPORATION_CODE_UPDATED
   , USER_CODE_UPDATED = W.USER_CODE_UPDATED, IP_UPDATED = W.IP_UPDATED
   , TIMESTAMP_UPDATED = W.TIMESTAMP_UPDATED

#ユーザマスタ(ワーク)にいるがパスワードなしのユーザに、パスワードマスタを生成
UP0200_16: |+
 insert into /* UP0200_16 */ WFM_USER_PASSWORD(CORPORATION_CODE, USER_CODE, SEQ_NO_USER_PASSWORD, PASSWORD, VALID_START_DATE, LOGIN_NG_COUNT, LOCK_FLAG, CHANGE_REQUEST_FLAG, DELETE_FLAG, CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED, CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
 select U.CORPORATION_CODE, U.USER_CODE, 1, U.DEFAULT_PASSWORD, trunc(sysdate), 0, '0', ?, '0', U.CORPORATION_CODE_UPDATED, U.USER_CODE_UPDATED, U.IP_UPDATED, U.TIMESTAMP_UPDATED, U.CORPORATION_CODE_UPDATED, U.USER_CODE_UPDATED, U.IP_UPDATED, U.TIMESTAMP_UPDATED
 from WFM_USER_WORK U
 where U.DEFAULT_PASSWORD is not null
  and not exists (
   select * from WFM_USER_PASSWORD P
   where P.CORPORATION_CODE = U.CORPORATION_CODE and P.USER_CODE = U.USER_CODE
  )

#ワークと多言語マスタを差分更新
UP0200_17: |+
 merge into /* UP0200_17 */ WFM_NAME_LOOKUP N
 using (
  select O.ID, W.${WORK_FIELD_NAME} as WORK_NAME_VALUE
   , ? as TABLE_NAME, ? as COLUMN_NAME, ? as LOCALE_CODE
   , W.CORPORATION_CODE_UPDATED, W.USER_CODE_UPDATED, W.IP_UPDATED, W.TIMESTAMP_UPDATED
  from ${TABLE_NAME} O
   inner join ${WORK_TABLE_NAME} W
    on ${JOIN_CONDITION}
 ) X
  on (N.TABLE_NAME = X.TABLE_NAME and N.COLUMN_NAME = X.COLUMN_NAME and N.ID = X.ID and N.LOCALE_CODE = X.LOCALE_CODE)
 when matched then
  update set NAME_VALUE = X.WORK_NAME_VALUE
   , CORPORATION_CODE_UPDATED = X.CORPORATION_CODE_UPDATED
   , USER_CODE_UPDATED = X.USER_CODE_UPDATED
   , IP_UPDATED = X.IP_UPDATED
   , TIMESTAMP_UPDATED = X.TIMESTAMP_UPDATED
 when not matched then
  insert (TABLE_NAME, ID, COLUMN_NAME, LOCALE_CODE, NAME_VALUE
   , CORPORATION_CODE_CREATED, USER_CODE_CREATED, IP_CREATED, TIMESTAMP_CREATED
   , CORPORATION_CODE_UPDATED, USER_CODE_UPDATED, IP_UPDATED, TIMESTAMP_UPDATED)
  values (X.TABLE_NAME, X.ID, X.COLUMN_NAME, X.LOCALE_CODE, X.WORK_NAME_VALUE
   , X.CORPORATION_CODE_UPDATED, X.USER_CODE_UPDATED, X.IP_UPDATED, X.TIMESTAMP_UPDATED
   , X.CORPORATION_CODE_UPDATED, X.USER_CODE_UPDATED, X.IP_UPDATED, X.TIMESTAMP_UPDATED)

#ワークにないならテーブルから論理削除
UP0200_18: |+
 update /* UP0200_18 */ ${TABLE_NAME} O
 set DELETE_FLAG = '1'
  , CORPORATION_CODE_UPDATED = ?
  , USER_CODE_UPDATED = ?
  , IP_UPDATED = ?
  , TIMESTAMP_UPDATED = systimestamp
 where
  CORPORATION_CODE = ?
  and not exists (
   select *
   from ${WORK_TABLE_NAME} W
   where ${JOIN_CONDITION}
  )

#ユーザコード一覧を抽出
UP0200_19: |+
 select /* UP0200_19 */ CORPORATION_CODE, USER_CODE from WFM_USER where CORPORATION_CODE = ? and DELETE_FLAG = '0'

#ユーザコード一覧を抽出
UP0200_20: |+
 select /* UP0200_20 */ CORPORATION_CODE, ORGANIZATION_CODE from WFM_ORGANIZATION where CORPORATION_CODE = ? and DELETE_FLAG = '0'
